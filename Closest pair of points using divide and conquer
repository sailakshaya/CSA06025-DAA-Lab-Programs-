import math

def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

def brute_force(points):
    min_dist = float('inf')
    n = len(points)
    for i in range(n):
        for j in range(i + 1, n):
            min_dist = min(min_dist, distance(points[i], points[j]))
    return min_dist

def strip_closest(strip, d):
    min_dist = d
    strip.sort(key=lambda point: point[1])
    n = len(strip)
    for i in range(n):
        for j in range(i + 1, n):
            if (strip[j][1] - strip[i][1]) < min_dist:
                min_dist = min(min_dist, distance(strip[i], strip[j]))
            else:
                break
    return min_dist

def closest_pair(points):
    if len(points) <= 3:
        return brute_force(points)
    
    mid = len(points) // 2
    mid_point = points[mid]

    dl = closest_pair(points[:mid])
    dr = closest_pair(points[mid:])
    d = min(dl, dr)

    strip = [point for point in points if abs(point[0] - mid_point[0]) < d]
    return min(d, strip_closest(strip, d))

def closest_pair_of_points(points):
    points.sort()
    return closest_pair(points)

points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
result = closest_pair_of_points(points)
print("The smallest distance is:", result)
