from collections import deque, defaultdict

def catMouseGame(graph):
    n = len(graph)
    # (mouse_pos, cat_pos, turn) -> Result (0: draw, 1: mouse wins, 2: cat wins)
    memo = {}
    
    def bfs():
        queue = deque([(1, 2, 0)])  # Start with (mouse, cat, turn) and BFS level
        memo[(1, 2, 0)] = 0  # Initial state
        
        while queue:
            mouse, cat, turn = queue.popleft()
            
            if (mouse, cat, turn) in memo:
                continue
            
            if mouse == 0:
                memo[(mouse, cat, turn)] = 1
                continue
            
            if mouse == cat:
                memo[(mouse, cat, turn)] = 2
                continue
            
            if turn == 0:  # Mouse's turn
                result = 2
                for next_mouse in graph[mouse]:
                    if (next_mouse, cat, 1) not in memo:
                        queue.append((next_mouse, cat, 1))
                    result = min(result, memo.get((next_mouse, cat, 1), 2))
                
                memo[(mouse, cat, turn)] = result if result < 2 else 0
            
            else:  # Cat's turn
                result = 1
                for next_cat in graph[cat]:
                    if next_cat != 0:  # Cat cannot move to the hole
                        for next_mouse in graph[mouse]:
                            if (next_mouse, next_cat, 0) not in memo:
                                queue.append((next_mouse, next_cat, 0))
                            result = max(result, memo.get((next_mouse, next_cat, 0), 1))
                
                memo[(mouse, cat, turn)] = result if result > 1 else 0
        
        return memo.get((1, 2, 0), 0)
    
    return bfs()

# Example usage:
graph1 = [[2, 3], [1, 4], [0, 1, 4], [0], [1, 2]]
print(catMouseGame(graph1))  # Output could be 1, 2, or 0 based on the optimal play

graph2 = [[2, 3], [3], [0], [0, 1]]
print(catMouseGame(graph2))  # Output could be 1, 2, or 0 based on the optimal play
